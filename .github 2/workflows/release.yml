name: Release

on:
  push:
    tags:
      - 'v*'

env:
  SWIFT_VERSION: '5.9'

jobs:
  test:
    name: Pre-release Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
        
    - name: Install Chrome and ChromeDriver (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        CHROMEDRIVER_VERSION=$(curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE)
        wget -N http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip
        unzip chromedriver_linux64.zip
        sudo mv chromedriver /usr/local/bin/chromedriver
        sudo chmod +x /usr/local/bin/chromedriver
        
    - name: Install ChromeDriver (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install chromedriver
      
    - name: Run all tests
      run: swift test
      
  build:
    name: Build Release Artifacts
    runs-on: macos-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
        
    - name: Build release
      run: swift build -c release
      
    - name: Create distribution archive
      run: |
        mkdir -p dist
        cp -r .build/release/* dist/ 2>/dev/null || true
        cp README.md dist/
        cp LICENSE dist/ 2>/dev/null || true
        tar -czf ariadne-${{ github.ref_name }}.tar.gz -C dist .
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts-${{ github.ref_name }}
        path: ariadne-${{ github.ref_name }}.tar.gz
        
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts-${{ github.ref_name }}
        
    - name: Extract version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract changelog for this version
          sed -n "/## \[${{ steps.version.outputs.version }}\]/,/## \[/p" CHANGELOG.md | head -n -1 > release_notes.md
        else
          echo "Release ${{ steps.version.outputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          echo "### Changes" >> release_notes.md
          echo "- See commit history for detailed changes" >> release_notes.md
        fi
        
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        name: Ariadne ${{ steps.version.outputs.version }}
        body_path: release_notes.md
        files: ariadne-${{ github.ref_name }}.tar.gz
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  publish-docs:
    name: Publish Documentation
    runs-on: macos-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
        
    - name: Generate documentation
      run: |
        if command -v swift-doc >/dev/null 2>&1; then
          swift-doc generate Sources/ --output docs/
          echo "Documentation generated successfully"
        else
          echo "SwiftDocC not available, creating placeholder docs"
          mkdir -p docs
          echo "<h1>Ariadne Documentation</h1>" > docs/index.html
          echo "<p>Documentation for version ${{ github.ref_name }}</p>" >> docs/index.html
        fi
        
    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        destination_dir: ${{ github.ref_name }}
        
  notify:
    name: Post-release Notifications
    runs-on: ubuntu-latest
    needs: [create-release, publish-docs]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.create-release.result == 'success'
      run: |
        echo "Release ${{ github.ref_name }} created successfully!"
        
    - name: Notify on failure
      if: needs.create-release.result == 'failure'
      run: |
        echo "Release ${{ github.ref_name }} failed!"
        exit 1