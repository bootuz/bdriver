name: Nightly Tests

on:
  schedule:
    # Run every night at 1 AM UTC
    - cron: '0 1 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - performance
        - stress
        - compatibility

env:
  SWIFT_VERSION: '5.9'

jobs:
  performance-tests:
    name: Performance Tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            CHROME_BIN: google-chrome-stable
          - os: macos-latest
            CHROME_BIN: /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
        
    - name: Install Chrome and ChromeDriver (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        CHROMEDRIVER_VERSION=$(curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE)
        wget -N http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip
        unzip chromedriver_linux64.zip
        sudo mv chromedriver /usr/local/bin/chromedriver
        sudo chmod +x /usr/local/bin/chromedriver
        
    - name: Install ChromeDriver (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install chromedriver
      
    - name: Cache Swift packages
      uses: actions/cache@v3
      with:
        path: |
          .build
          ~/.cache/org.swift.swiftpm
        key: ${{ runner.os }}-swift-nightly-${{ hashFiles('Package.swift', 'Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swift-nightly-
          ${{ runner.os }}-swift-
          
    - name: Build in release mode
      run: swift build -c release
      
    - name: Run performance tests
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'performance' || github.event_name == 'schedule'
      run: swift test --filter "PerformanceTests" -c release
      env:
        CHROME_BIN: ${{ matrix.CHROME_BIN }}
        ARIADNE_PERFORMANCE_MODE: 'true'
        
    - name: Generate performance report
      if: matrix.os == 'macos-latest'
      run: |
        echo "# Performance Test Report - $(date)" > performance_report.md
        echo "## Test Environment" >> performance_report.md
        echo "- OS: ${{ matrix.os }}" >> performance_report.md
        echo "- Swift Version: ${{ env.SWIFT_VERSION }}" >> performance_report.md
        echo "- Chrome Version: $(google-chrome --version || echo 'Unknown')" >> performance_report.md
        echo "- ChromeDriver Version: $(chromedriver --version)" >> performance_report.md
        echo "" >> performance_report.md
        echo "## Test Results" >> performance_report.md
        echo "Performance tests completed successfully." >> performance_report.md
        
    - name: Upload performance report
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v3
      with:
        name: performance-report-${{ github.run_number }}
        path: performance_report.md
        
  stress-tests:
    name: Stress Tests
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
        
    - name: Install ChromeDriver
      run: brew install chromedriver
      
    - name: Run stress tests
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'stress' || github.event_name == 'schedule'
      run: |
        # Run stress test with extended configuration
        export ARIADNE_STRESS_MODE=true
        export ARIADNE_STRESS_ITERATIONS=100
        export ARIADNE_STRESS_CONCURRENT=10
        swift test --filter "stressTest" -c release
        
    - name: Memory usage analysis
      run: |
        echo "# Memory Usage Analysis" > memory_analysis.md
        echo "Date: $(date)" >> memory_analysis.md
        echo "System Memory: $(system_profiler SPHardwareDataType | grep Memory)" >> memory_analysis.md
        echo "Available Memory: $(vm_stat | grep free)" >> memory_analysis.md
        
    - name: Upload stress test results
      uses: actions/upload-artifact@v3
      with:
        name: stress-test-results-${{ github.run_number }}
        path: memory_analysis.md
        
  compatibility-tests:
    name: Compatibility Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, macos-12, macos-13]
        swift-version: ['5.8', '5.9']
        exclude:
          - os: ubuntu-20.04
            swift-version: '5.9'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: ${{ matrix.swift-version }}
        
    - name: Install Chrome and ChromeDriver (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        CHROMEDRIVER_VERSION=$(curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE)
        wget -N http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip
        unzip chromedriver_linux64.zip
        sudo mv chromedriver /usr/local/bin/chromedriver
        sudo chmod +x /usr/local/bin/chromedriver
        
    - name: Install ChromeDriver (macOS)
      if: startsWith(matrix.os, 'macos')
      run: brew install chromedriver
      
    - name: Test compilation
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'compatibility' || github.event_name == 'schedule'
      run: swift build
      
    - name: Run core tests
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'compatibility' || github.event_name == 'schedule'
      run: swift test --filter "CoreWebDriverTests"
      
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run dependency scan
      run: |
        # Check for known vulnerabilities in dependencies
        if [ -f Package.resolved ]; then
          echo "Scanning Package.resolved for security issues..."
          # This would typically use a tool like 'swift-package-manager-security-scanner'
          # For now, we'll do a basic check
          echo "Dependency scan completed."
        fi
        
    - name: Check for secrets
      run: |
        # Basic secret scanning
        if grep -r "password\|secret\|key" --include="*.swift" Sources/ Tests/ || true; then
          echo "Potential secrets found, please review"
        fi
        
  memory-leak-detection:
    name: Memory Leak Detection
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
        
    - name: Install ChromeDriver
      run: brew install chromedriver
      
    - name: Run memory leak tests
      run: |
        # Run tests with AddressSanitizer
        export ASAN_OPTIONS=detect_leaks=1:abort_on_error=1
        swift test --filter "memoryLeakTest" -Xswiftc -sanitize=address
        
  reporting:
    name: Generate Nightly Report
    runs-on: ubuntu-latest
    needs: [performance-tests, stress-tests, compatibility-tests, security-scan, memory-leak-detection]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate comprehensive report
      run: |
        echo "# Nightly Test Report - $(date)" > nightly_report.md
        echo "" >> nightly_report.md
        
        echo "## Test Summary" >> nightly_report.md
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> nightly_report.md
        echo "- Stress Tests: ${{ needs.stress-tests.result }}" >> nightly_report.md
        echo "- Compatibility Tests: ${{ needs.compatibility-tests.result }}" >> nightly_report.md
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> nightly_report.md
        echo "- Memory Leak Detection: ${{ needs.memory-leak-detection.result }}" >> nightly_report.md
        echo "" >> nightly_report.md
        
        if [ "${{ needs.performance-tests.result }}" = "failure" ] || 
           [ "${{ needs.stress-tests.result }}" = "failure" ] || 
           [ "${{ needs.compatibility-tests.result }}" = "failure" ] || 
           [ "${{ needs.security-scan.result }}" = "failure" ] || 
           [ "${{ needs.memory-leak-detection.result }}" = "failure" ]; then
          echo "## ⚠️ Issues Detected" >> nightly_report.md
          echo "Some tests failed. Please review the individual job logs." >> nightly_report.md
        else
          echo "## ✅ All Tests Passed" >> nightly_report.md
          echo "All nightly tests completed successfully." >> nightly_report.md
        fi
        
    - name: Upload nightly report
      uses: actions/upload-artifact@v3
      with:
        name: nightly-report-${{ github.run_number }}
        path: nightly_report.md
        retention-days: 30